#Name of device
substitutions:
  device_name: waterflowkit
  friendly_name: WaterFlowKit
  devicename: waterflowkit
  upper_devicename: waterflowkit
  
#Esphome start
esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  #project:
  #  name: "smarthomeshop.waterflowkit"
  #  version: ${waterflowkit_software_version}

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_encryption_key

#Enable Over the Air updates
ota:
  platform: esphome
  password: !secret ota_password

safe_mode:
  disabled: false
  reboot_timeout: 10min
  num_attempts: 5

#dashboard_import:
#  package_import_url: github://smarthomeshop/waterflowkit/waterflowkit.yaml@main

# MQTT
#mqtt:
#  broker: !secret mqtt_ip
#  username: !secret mqtt_user_esp
#  password: !secret mqtt_password_esp
#  client_id: $devicename

# WIFI
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$upper_devicename"
    password: !secret password_ap

captive_portal:

# Webserver
web_server:
  port: 80
  version: 2
  include_internal: false
  auth:
    username: !secret web_server_user
    password: !secret web_server_password
  local: true

# Switch to restart the waterflowkit
switch:
  - platform: restart
    id: switch_restart
    name: "${friendly_name} Restart"

output:
  - platform: ledc
    pin: GPIO16
    id: output_led_green
  - platform: ledc
    pin: GPIO17
    id: output_led_red
  - platform: ledc
    pin: GPIO04
    id: output_led_blue

light:
  - platform: monochromatic
    id: light_led_green
    output: output_led_green
  - platform: status_led
    id: light_led_red
    output: output_led_red
  - platform: monochromatic
    id: light_led_blue
    output: output_led_blue

i2c:
  sda: GPIO21
  scl: GPIO22

# Time for uptime
time:
  - platform: homeassistant
    id: time_homeassistant
#    on_time_sync:
#      - component.update: sensor_uptime_timestamp
      
  - platform: sntp
    id: time_sntp

text_sensor:
  # WiFi info
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP address"
      icon: "mdi:network-outline"
    ssid:
      name: "${friendly_name} Connected SSID"
    bssid:
      name: "${friendly_name} Connected BSSID"
  - platform: version
    id: text_sensor_version
    name: "${friendly_name} ESPHome Version"
    hide_timestamp: true

sensor:
  # Wifi signal
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 300s
    id: sensor_wifi_signal

  # Uptime Sensor
  #
  # The uptime sensor allows you to track the time the ESP has stayed up for in
  # seconds. Time rollovers are automatically handled.
  #
  # https://esphome.io/components/sensor/uptime.html
  #
  #
  # WARNING! DO NOT USE THIS SENSOR IN HOME ASSISTANT!
  #
  # I see many of you using this sensor in Home Assistant, but please, don't.
  # There is no need to have an update of the uptime, just send the timestamp
  # of when the device started ONCE. It will have the same effect and saves
  # you system tons of processing and recording.
  #
  
  #- platform: uptime
  #  id: sensor_uptime

  # Uptime Timestamp Sensor
  #
  # This sensor is an alternative for the uptime sensor, which only sends the
  # startup timestamp of the device ONCE! Instead of sending updates to
  # Home Assistant constantly.
  #
  # This saves you tons of updates to be processed and, if recorded/stored in the
  # Home Assistant database, many many less rows.
  #
  # This sensor can be triggered manually and will only update the status once!
  #

#  - platform: template
#    id: sensor_uptime_timestamp
#    name: "${friendly_name} Uptime"
#    device_class: "timestamp"
#    accuracy_decimals: 0
#    update_interval: never
#    lambda: |-
#      static float timestamp = (
#        id(time_homeassistant).utcnow().timestamp - id(sensor_uptime).state
#      );
#      return timestamp;

  # HDC1080 temp & hum sensor
  - platform: hdc1080
    temperature:
      id: sensor_temperature
      name: "Waterflow Temperature"
      filters:
        offset: -4.5
    humidity:
      id: sensor_humidity
      name: "Waterflow Humidity"
      filters:
        offset: 12
    update_interval: 60s

   # Waterflow Sensor 1 Temperature Hot Water
  - platform: ntc
    sensor: resistance_sensor_1
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 50kOhm
    name: "Waterflow Hot Water Temperature"
    accuracy_decimals: 1

  - platform: resistance
    id: resistance_sensor_1
    sensor: source_sensor_1
    configuration: UPSTREAM
    resistor: 50kOhm
    internal: true
    name: "Waterflow Hot Temperature resistance"

  - platform: adc
    id: source_sensor_1
    pin: GPIO36
    update_interval: 5s
    name: "Waterflow Hot Temperature voltage"
    attenuation: 12db
    internal: true
  
  # Waterflow Pulseensor 1 Hot Water
  - platform: pulse_counter
    pin:
      number: GPIO26
      mode:
        input: true
        pullup: true
    unit_of_measurement: 'L/min'
    accuracy_decimals: 1
    id: sensor_1_water_usage
    name: "Waterflow Hot Water Current Usage"
    icon: "mdi:water-pump"
    update_interval: 5s
    filters:
      - multiply: 0.00172  # Updated multiplier based on calibration
    total:
      id: sensor_1_pulse_meter_total
      name: "Waterflow Hot Water Total Consumption"
      icon: "mdi:cube-outline"
      unit_of_measurement: "L"
      state_class: total_increasing
      device_class: water
      accuracy_decimals: 0
      filters:
        - multiply: 0.00163

  # Waterflow Sensor 2 Temperature Cold Water
  - platform: ntc
    sensor: resistance_sensor_2
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 50kOhm
    name: "Waterflow Cold Water Temperature"
    accuracy_decimals: 1

  - platform: resistance
    id: resistance_sensor_2
    sensor: source_sensor_2
    configuration: UPSTREAM
    resistor: 50kOhm
    internal: true
    name: "Waterflow Cold Temperature resistance"

  - platform: adc
    id: source_sensor_2
    pin: GPIO39
    update_interval: 5s
    name: "Waterflow Cold Temperature voltage"
    attenuation: 12db
    internal: true

  # Waterflow Pulseensor 1 Cold Water
  - platform: pulse_counter
    pin:
      number: GPIO14
      mode:
        input: true
        pullup: true
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    unit_of_measurement: 'L/min'
    accuracy_decimals: 1
    id: sensor_2_water_usage
    name: "Waterflow Cold Water Current Usage"
    icon: "mdi:water-pump"
    update_interval: 5s
    filters:
      - multiply: 0.00172  # Updated multiplier based on calibration
    total:
      id: sensor_2_pulse_meter_total
      name: "Waterflow Cold Water Total Consumption"
      icon: "mdi:cube-outline"
      unit_of_measurement: "L"
      state_class: total_increasing
      device_class: water
      accuracy_decimals: 0
      filters:
        - multiply: 0.00163


